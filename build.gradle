/*********************************************************
 *********************** Plugins *************************
 *********************************************************/



apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse'




/*********************************************************
 ******************* Custom settings *********************
 *********************************************************/

/*
 * We need the crawl.jar for command line tasks.
 */
jar.enabled = true

/*
 * The version. Increment as appropriate.
 */
version = '0.1'

sourceCompatibility = 1.6
targetCompatibility = 1.6
logging.captureStandardOutput LogLevel.INFO
//configurations.compile.transitive = true

def tmpResourcesPath = 'tmp/rootContent/resources/'
def webArtemisClonePath = 'Web-Artemis'

// where jars go
def lib_dir = "lib"

// jars that we manually put in place
def local_lib_dir = lib_dir + "/local"

// like local_lib_dir, but libraries that are to be evaluated
def local_experimental_dir = lib_dir + "/experimental"

// jars copied here using the copyLibs task
def local_cache_dir = lib_dir + "/cached"




/*********************************************************
 ****************** Config Properties ********************
 *********************************************************/

Properties props = new Properties()
props.load(new FileInputStream(config))











/*********************************************************
 *************** Ivy/Maven dependencies ******************
 *********************************************************/

repositories {

    // a local repository for jars that are not available from online ones
    // at the top so it looks here first
    flatDir name: 'localRepository', dirs: [local_lib_dir, local_cache_dir, local_experimental_dir]

	maven {
	    url "https://developer.genedb.org/nexus/content/repositories/jboss/"
	}
	maven {
        url "https://developer.genedb.org/nexus/content/repositories/sonatype-releases/"
	}
	maven {
        url "https://developer.genedb.org/nexus/content/repositories/java.net-m2"
	}
	maven {
        url "https://developer.genedb.org/nexus/content/repositories/central/"
	}
	maven {
        url "https://developer.genedb.org/nexus/content/repositories/ApacheReleases/"
	}
	maven {
        url "https://developer.genedb.org/nexus/content/repositories/ApachePublic/"
	}
	maven {
        url "https://developer.genedb.org/nexus/content/repositories/apache-snapshots/"
	}
	maven {
        url "https://developer.genedb.org/nexus/content/repositories/codehaus-snapshots/"
	}
	maven {
        url "https://developer.genedb.org/nexus/content/repositories/spring-external/"
	}
	maven {
        url "https://developer.genedb.org/nexus/content/repositories/spring-release/"
	}
	maven {
        url "https://developer.genedb.org/nexus/content/repositories/Gradle/"
	}
	maven {
        url "http://oss.sonatype.org/content/repositories/releases"
	}
//	maven {
//      url "http://repo.gradle.org/gradle/repo"
//	}
        maven {
        url "http://central.maven.org/maven2"
	}
	maven {
        url "http://download.java.net/maven/2"
	}
	maven {
        url "http://repository.jboss.org/maven2"
	}
	maven {
        url "http://www.ebi.ac.uk/~maven/m2repo"
	}
	maven {
        url "http://repository.apache.org/content/groups/public/"
	}
	maven {
        url "http://repository.springsource.com/maven/bundles/release"
	}
	maven {
        url "http://repository.springsource.com/maven/bundles/external"
	}
	maven {
        url "http://repository.springsource.com/maven/bundles/milestone"
	}

	// never use this!
    // mavenCentral()
}


dependencies {

    providedCompile group: 'javax.servlet', name: 'com.springsource.javax.servlet', version:'2.5.0'
    testCompile group: 'junit', name: 'junit', version: '4.+'

    compile group: 'log4j', name: 'log4j', version:'1.2.16'

    compile group: 'org.postgresql', name: 'com.springsource.org.postgresql.jdbc4', version:'8.3.604'

	compile group: 'com.hazelcast', name:'hazelcast', version:'1.9.4.4'
    compile group: 'com.hazelcast', name:'hazelcast-spring', version:'1.9.4.4'

    compile group: 'org.mybatis', name: 'mybatis', version:'3.0.6'
    compile group: 'org.mybatis', name: 'mybatis-hazelcast', version:'1.0.0'

    compile group: 'commons-lang', name: 'commons-lang', version:'2.2'
	compile group: 'commons-net', name: 'commons-net', version:'2.2'

    compile group: 'org.elasticsearch', name: 'elasticsearch', version:'0.17.5'

    compile group: 'org.codehaus.jackson', name: 'jackson-xc', version:'1.7.5'

    compile group: 'args4j', name: 'args4j', version:'2.0.12'

    compile group: "org.apache.commons", name:"com.springsource.org.apache.commons.dbcp", version:"1.2.2.osgi"
    compile group: "org.springframework", name:"org.springframework.web.servlet", version:"3.0.5.RELEASE"
    compile group: "org.springframework", name:"org.springframework.jdbc", version:"3.0.5.RELEASE"

    compile group: 'org.mybatis', name: 'mybatis-spring', version:'1.0.2'

    // used for soap services
    compile group: 'org.apache.cxf', name: 'cxf-rt-frontend-jaxws', version: '2.2.6'
    compile group: 'org.apache.cxf', name: 'cxf-rt-transports-http', version: '2.2.6'

    compile group: 'uk.ac.ebi.das', name:'jdas', version: '1.0.1'

	// note that this information is matched up to jars in the local repository by the use of naming convention assumptions
	// as well as some trial and error by ivy
	compile group: 'net.sf', name: 'sam', version: '1.45', ext: 'jar'
	compile group: 'org.sanger', name: 'artemis', version: 'v13.2.1', ext:'jar'
    compile group: 'org.biojava', name: 'biojava', version: '1.6', ext:'jar'
    compile group: 'org.obo', name: 'obo', version: '1.0', ext:'jar'
    compile group: 'org.obo', name: 'bbop', version: '1.0', ext:'jar'

    compile group:'jgrapht', name:'jgrapht', version: '0.7.3'

	// finally, any jars in lib/local
    compile fileTree(dir: local_lib_dir, includes: ['**.jar'])
    compile fileTree(dir: local_experimental_dir, includes: ['**.jar'])


}





/*********************************************************
 ************** Customized standard tasks ****************
 *********************************************************/


clean {
    ant.delete(dir:"tmp")
}

/*
* Testing.
*/

test {
   maxHeapSize = '2048m'
}

test.doFirst {
   systemProperties.putAll( props )
}


/*
 * There is an option to build a fat jar. It is slow. Off by default.
 */
jar {

    archiveName = "crawl.jar" // override to not include the version number in the archive name

    manifest {
        attributes 'Implementation-Title': 'Crawl', 'Implementation-Version': '0.1'
    }

    // must be executed during the jar task (as of gradle 1 milestone 7)
    if (fat == "true") {
        from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    }
}

// must be executed at the end of the jar task
jar << {
    if (fat != "true") {
        copy {
            from configurations.runtime
            into('build/libs')
        }
    }
}





/*
* Currently using a custom install task because the gradle application plugin only supports one main class.
*/
task install(dependsOn: ['jar']) << {

    description = "Installs the crawl and dependencies in a convenient location (by default in the user.home/bin folder"

    def the_dir = null;

    if (project.hasProperty("dir") && prompt_for_custom_installs) {

        if (new File(dir).isDirectory()) {
            println "Using user supplied dir " + dir + ", which means wiping this folder."
            def answer = yesno("Are you prepared to wipe this folder if it exists? (yes/no) \n")
            if (answer == "no") {
                println ("OK. Quitting installation.")
                System.exit(1)
            }
        }

        the_dir = dir;

    } else {

        println "Using default dir " + System.properties["user.home"]
        the_dir = System.properties["user.home"] + "/bin/crawl"

    }

    ant.delete(dir:the_dir)

    copy {
        from tree = fileTree(project.buildDir.getPath() + "/libs").include('**/*.jar')
        into the_dir + "/lib"
    }

    copy {
        from "./crawl"
        into the_dir + "/bin"
    }

    copy {
        from('.') {
            include '*.properties'
            exclude 'gradle.properties'
            include '*.xml'
        }
        into the_dir + "/etc/"
    }

    ant.chmod(perm: "+x", dir: new File(the_dir + "/bin"), includes: '*')

}





/*
 * WAR building and deployment.
 */

war {

    /*
     * We always want to force the war to be repackaged because the file copying
     * done during the war task (see war.doFirst) must be done even if the
     * classes aren't changed, because a different property file might be being
     * used.
     *
     * Gradle has a convention whereby "cleanTask" forces that task to be
     * considered not up to date. Thus we use cleanWar to ensure that the war
     * used has the correct property and spring xml files put in.
     */
    dependsOn cleanWar

    webInf { from 'tmp/WEB-INF' }
    baseName = props["deploy.name"]
    archiveName = props["deploy.name"] + ".war"
    from 'tmp/rootContent/'
}


war.doFirst{

    def resourceType = props["resource.type"]
    ant.copy (
        file:'etc/config/crawl-' + resourceType + '.xml',
        toFile:'tmp/WEB-INF/crawl-repository.xml',
        overwrite:'true' )


	new File("tmp/WEB-INF/classes/").mkdirs()

    if (props["hazelcast"] != null)
        hazelcast = props["hazelcast"]

	ant.copy (
		file: hazelcast,
		toFile:'tmp/WEB-INF/classes/hazelcast.xml',
		overwrite:'true' )


	/*
	* To simplify getting started, a default alignments.json is provided
	* and used in the documentation examples, and it is specified as
	* a relative path (so they don't have to edit a property file to get
	* going. This works fine for the jetty runner, but if a war is
	* deployed it needs to know the absolute path of the file that was
	* specified. Rather than copying the file into the war, its absolute
	* path is determined at build time.
	*/

	File project_properties = new File("tmp/WEB-INF/classes/project.properties")
	project_properties.write("#generated by gradle build \n")
	props.each() { key, value ->

		if (key == "alignments") {
			File alignmentsFile = new File(value)

			if (alignmentsFile != null && alignmentsFile.isFile()) {
				value = alignmentsFile.getAbsolutePath()
			}
		}

		def line = key + "=" + value + "\n"
		//print line
		project_properties.append(line)
    }

	def webArtemisClone = new File(tmpResourcesPath + "/" + webArtemisClonePath)

	if (pullWebArtemis == "true") {

		def proc = ['rm', '-rf', tmpResourcesPath + "/" + webArtemisClonePath].execute()
		proc.waitFor()
		if (proc.exitValue() > 1) throw new Exception (proc.err.text)

		println "Cloning Web-Artemis into " + tmpResourcesPath + webArtemisClonePath
		gitClone(webArtemisGitUri, webArtemisGitBranch, file(tmpResourcesPath))

		String ws = "/" + props["deploy.name"];

		String indexFileName = tmpResourcesPath + "/" + webArtemisClonePath + "/index.html";
		String html =   new File(indexFileName).getText();

		String toReplace = "'directory':'.'";
		String with = "webService:'${ws}', 'directory':'.'";

		// println("Attempting to replace \n ${toReplace} \nwith \n ${with}");
		String replaced = html.replace(toReplace, with);

		new File(indexFileName).setText(replaced);

	}

	copy {
		from tree = fileTree("./doc")
		into tmpResourcesPath
	}

}







/*********************************************************
 ******************** Custom tasks ***********************
 *********************************************************/

/*
* Generates the gradlew wrapper. Run this task when you upgrade gradle.
*/
task createWrapper(type: Wrapper) {
   gradleVersion = '1.0-rc-1'
}


/*
 * Copies the generated war a tomcat webapp folder.
 */
task deploy(dependsOn: 'war') << {
    copy {
        from war.archivePath
        into props["deploy.dir"]
    }
}


/*
 * Copies the dependencies (i.e., jars) into a local cached folder for inclusion into the git repository.
 */
task copyLibs << {

    new File(local_cache_dir).mkdirs()

    def newFiles = []
    for(file in configurations.compile) {
        String fileName = file.getPath()
        if (! fileName.contains(local_cache_dir)) {
            newFiles.add(fileName)
        }
    }

    copy {
        from files(newFiles)
        into local_cache_dir
    }
}


/*
 * Builds a 'lightweight' client jar.
 */
task clientJar(type : Jar) {
    from sourceSets.main.output
    include 'org/genedb/crawl/client/**'
    include 'org/genedb/crawl/model/**'
    include 'org/genedb/crawl/json/**'
    baseName = "crawl-client"
}






/**********************************************************
 ************** Elasticsearch Plugin tasks* ***************
 **********************************************************/

/*
 * To allow custom regex searches (e.g. of sequences), the following tasks
 * will generate a special elasticsearch plugin, which can be included in
 * an elasticsearch installation by means of a web server download.
 */

def pluginDistDir = "tmp/plugin"
String arbitrary_elasticsearch_plugin_webserver_deployment_folder = "/Library/WebServer/Documents/plugins/regex"

/*
 * Generates the plugin jar
 */
task elasticSearchRegexPlugin(type: Jar) {
    from sourceSets.main.output
    include 'org/genedb/crawl/elasticsearch/plugin/**'
    include 'es-plugin.properties'
    archiveName = "elasticsearch-regex-0.16.0.jar"
}

/*
 * Copies the jar into a folder for zipping.
 */

task copyDist(dependsOn: [elasticSearchRegexPlugin], description: 'Builds the plugin zip file') << {
    copy {
        from project.buildDir.getPath() + "/libs/elasticsearch-regex-0.16.0.jar"
        into pluginDistDir
    }
}

/*
 * Zips a plugin jar folder for deployment.
 */
task zipPlugin(type: Zip, dependsOn: ['copyDist']) {
    from(pluginDistDir) {
    }
    archiveName = "elasticsearch-regex-0.16.0.zip"
    ant.delete(dir: pluginDistDir)
}

/*
* Deploys the zipped jar to a web server.
*/
task releasePlugin(dependsOn: [zipPlugin]) << {
    copy {
        from distsDir
        into new File(arbitrary_elasticsearch_plugin_webserver_deployment_folder)
    }
}



/**********************************************************
 ******************* Custom functions *********************
 **********************************************************/



/*
 * Makes a git clone.
 */
def gitClone(String url, String branch, File dir) {
	dir.mkdirs()
    def exec = ['git','clone', url, '-b', branch]
    //println exec
	def proc = exec.execute(['GIT_SSL_NO_VERIFY=true'], dir)
	proc.waitFor()
	if (proc.exitValue() > 1) throw new Exception (proc.err.text)
}


/*
 * Prompts the user for either a yes or a no.
 */
def yesno(message) {
    def answer = null;
    while (answer == null) {
        println "Please enter yes or no : \n"
        def user_answer = System.console().readLine()
        if (user_answer == "yes" || user_answer == "no") {
            answer = user_answer;
        }
    }
    return answer;
}



