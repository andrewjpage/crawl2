apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse'

//configurations.compile.transitive = true

/*
 * We need the crawl.jar for command line tasks.  
 */
jar.enabled = true

version = '0.1'

sourceCompatibility = 1.6
targetCompatibility = 1.6

// load properties from the specified config file
Properties props = new Properties()
props.load(new FileInputStream(config))

//compileJava.options.fork([memoryMaximumSize:"1024m"])

def tmpResourcesPath = 'tmp/rootContent/resources/'
def webArtemisClonePath = 'Web-Artemis'

repositories {
	
	// commented out - let's see if we can get away without having to maintain this.
    // mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/jboss/"] 
    // mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/sonatype-releases/"]
    // mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/java.net-m2"]
    
    mavenRepo urls: ["http://repository.sonatype.org/content/repositories/central"]
    mavenRepo urls: ["http://oss.sonatype.org/content/repositories/releases"]
    mavenRepo urls: ["http://download.java.net/maven/2"]
    mavenRepo urls: ["http://repository.jboss.org/maven2"]
    
    mavenRepo urls: ["http://www.ebi.ac.uk/~maven/m2repo"]
    
    mavenRepo urls: ["http://repository.springsource.com/maven/bundles/release"]
    mavenRepo urls: ["http://repository.springsource.com/maven/bundles/external"]
    mavenRepo urls: ["http://repository.springsource.com/maven/bundles/milestone"]
    //mavenRepo urls: ["http://repository.springsource.com/maven/bundles/snapshot"]
    
	// a local repository for jars that are not available from online ones
	flatDir name: 'localRepository', dirs: 'lib/local'
	
    mavenCentral()
}


dependencies {
    
    providedCompile group: 'javax.servlet', name: 'com.springsource.javax.servlet', version:'2.5.0'    
    testCompile group: 'junit', name: 'junit', version: '4.+'
    
    compile group: 'log4j', name: 'log4j', version:'1.2.16'
    
    compile group: 'org.postgresql', name: 'com.springsource.org.postgresql.jdbc4', version:'8.3.604'
    
    compile group: 'org.mybatis', name: 'mybatis', version:'3.0.4'
    compile group: 'org.mybatis', name: 'mybatis-hazelcast', version:'1.0.0'
    
    compile group: 'commons-lang', name: 'commons-lang', version:'2.2'
	compile group: 'commons-net', name: 'commons-net', version:'2.2'
	
    compile group: 'org.elasticsearch', name: 'elasticsearch', version:'0.16.0'
    
    compile group: 'org.codehaus.jackson', name: 'jackson-xc', version:'1.7.5'
    
    compile group: 'args4j', name: 'args4j', version:'2.0.12'
    
    compile group: "org.apache.commons", name:"com.springsource.org.apache.commons.dbcp", version:"1.2.2.osgi"
    compile group: "org.springframework", name:"org.springframework.web.servlet", version:"3.0.5.RELEASE"
    compile group: "org.springframework", name:"org.springframework.jdbc", version:"3.0.5.RELEASE"
    
    compile group: 'org.mybatis', name: 'mybatis-spring', version:'1.0.0'
    
    compile group: 'uk.ac.ebi.das', name:'jdas', version: '1.0.1'
	
	// note that this information is matched up to jars in the local repository by the use of naming convention assumptions
	// as well as some trial and error by ivy
	compile group: 'net.sf', name: 'sam', version: '1.42', ext: 'jar'
	compile group: 'org.sanger', name: 'artemis', version: 'v13.0.15', ext:'jar'
	
	// does not currently work with eclipse target
    // compile fileTree(dir: 'lib/local', includes: ['**.jar'])
    
}

jar {
	archiveName = "crawl.jar"
}

jar << {
	
    manifest {
        attributes 'Implementation-Title': 'Crawl', 'Implementation-Version': '0.1'
    }
	
	// the default set in the gradle.properties file is currently false as it should take less time
	if (fat == "true") {
	    from configurations.compile.collect {
	        it.isDirectory() ? it : zipTree(it).matching{exclude{it.name == 'META-INF'}}
	    }
	} else {
		copy {
			from configurations.runtime
			from configurations.runtime.allArtifacts*.file
			into('build/libs')
		}
	}
	
	
}

test.doFirst {
    systemProperties.putAll( props )
}


/*
* Currently using a custom install task because the gradle application plugin only supports one main class.
*/
task install(dependsOn: 'jar') << {
   
   copy {
	   from tree = fileTree(project.buildDir.getPath() + "/libs").include('**/*.jar')
	   into dir + "/lib"
   }
   
   copy {
	   from "./crawl"
	   into dir + "/bin"
   }
   
   ant.chmod(perm: "+x", dir: new File(dir + "/bin"), includes: '*')
}



/*
 * WAR building and deployment.
 */

war.doFirst{
    resourceType = props["resource.type"]
    ant.copy (
        file:'etc/config/crawl-' + resourceType + '.xml', 
        toFile:'tmp/WEB-INF/crawl-repository.xml',
        overwrite:'true' )
    
	
	
	
	/*
	 * To simplify getting started, a default alignments.json is provided 
	 * and used in the documentation examples, and it is specified as
	 * a relative path (so they don't have to edit a property file to get 
	 * going. This works fine for the jetty runner, but if a war is 
	 * deployed it needs to know the absolute path of the file that was 
	 * specified. Rather than copying the file into the war, its absolute 
	 * path is determined at build time.  
	 */
	
	
	//	ant.copy (
	//        file: config,
	//        toFile:'tmp/WEB-INF/classes/project.properties',
	//        overwrite:'true' )
	
	
	new File("tmp/WEB-INF/classes/").mkdirs()
	File project_properties = new File("tmp/WEB-INF/classes/project.properties")
	
	project_properties.append("#generated by gradle build \n")
	props.each() { key, value ->
		
		if (key == "alignments") {
			File alignmentsFile = new File(value)
			
			if (alignmentsFile != null && alignmentsFile.isFile()) {
				value = alignmentsFile.getAbsolutePath()
			} 
		}
		
		def line = key + "=" + value + "\n"
		//print line
		project_properties.append(line)
    }
	
	def webArtemisClone = new File(tmpResourcesPath + "/" + webArtemisClonePath)
	
	if (pullWebArtemis == "true" && !webArtemisClone.isDirectory()) {
		println "Cloning Web-Artemis into " + tmpResourcesPath + webArtemisClonePath
		gitClone('https://github.com/sanger-pathogens/Web-Artemis.git', file(tmpResourcesPath))
	}
	
	copy {
		from tree = fileTree("./doc")
		into tmpResourcesPath
	}
	
}

war {
    webInf { from 'tmp/WEB-INF' } 
    baseName = props["deploy.name"]
	archiveName = props["deploy.name"] + ".war"
	from 'tmp/rootContent/'
}


task deploy(dependsOn: 'war') << {
    copy {
        from war.archivePath
        into props["deploy.dir"] 
    }
}


/*
 * A custom task for wiping local ElasticSearch data
 */
task cleanes << {
    println "Deleting " + props["resource.elasticsearch.local.pathdata"]
    ant.delete(dir:props["resource.elasticsearch.local.pathdata"])
    println "Deleting " + props["resource.elasticsearch.local.pathlogs"]
    ant.delete(dir:props["resource.elasticsearch.local.pathlogs"])
}


/*
 * currently required for the eclipse plugin because currently eclipse classpath does 
 * not fail gracefully if a sources jar is not available, which is the case for the 
 * local jars, see :
 * 		http://issues.gradle.org/browse/GRADLE-1157
 * should be able to remove this once it is fixed
 */
eclipseClasspath {
	downloadSources = false; // required for eclipseClasspath to work
}



/*
 * Generates the gradlew wrapper.
 */
task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-2'
}

/**
 * Makes a git clone.
 */
def gitClone(String url, File dir) {
	dir.mkdirs()
	['git','clone', url].execute(null, dir)
}



