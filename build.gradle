apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse'
apply plugin: 'idea'

//configurations.compile.transitive = true

/*
 * We need the crawl.jar for command line tasks.  
 */
jar.enabled = true

version = '0.1'

sourceCompatibility = 1.6
targetCompatibility = 1.6
logging.captureStandardOutput LogLevel.INFO

// load properties from the specified config file
Properties props = new Properties()
props.load(new FileInputStream(config))
println "config ::"
println config

//compileJava.options.fork([memoryMaximumSize:"1024m"])

def tmpResourcesPath = 'tmp/rootContent/resources/'
def webArtemisClonePath = 'Web-Artemis'

configurations {
    jaxws
}

repositories {
	
	
	// a local repository for jars that are not available from online ones
	flatDir name: 'localRepository', dirs: ['lib/local', 'lib/local/obo']
	
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/jboss/"] 
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/sonatype-releases/"]
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/java.net-m2"]
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/central/"]
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/ApacheReleases/"]
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/ApachePublic/"]
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/apache-snapshots/"]
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/codehaus-snapshots/"]
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/spring-external/"]
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/spring-release/"]
    mavenRepo urls: ["https://developer.genedb.org/nexus/content/repositories/Gradle/"]
    
	// bad to depend on maven central
	//    mavenRepo urls: ["http://repository.sonatype.org/content/repositories/central"]
    mavenRepo urls: ["http://oss.sonatype.org/content/repositories/releases"]
    mavenRepo urls: ["http://repo.gradle.org/gradle/repo"]
    mavenRepo urls: ["http://download.java.net/maven/2"]
    
    mavenRepo urls: ["http://repository.jboss.org/maven2"]
    
    mavenRepo urls: ["http://www.ebi.ac.uk/~maven/m2repo"]
    mavenRepo urls: ["http://repository.apache.org/content/groups/public/"]
    //mavenRepo urls: ["http://www.biojava.org/download/maven/"]
    
    mavenRepo urls: ["http://repository.springsource.com/maven/bundles/release"]
    mavenRepo urls: ["http://repository.springsource.com/maven/bundles/external"]
    mavenRepo urls: ["http://repository.springsource.com/maven/bundles/milestone"]
    //mavenRepo urls: ["http://repository.springsource.com/maven/bundles/snapshot"]
    
	// never use this!
    mavenCentral()
}


dependencies {
    
    providedCompile group: 'javax.servlet', name: 'com.springsource.javax.servlet', version:'2.5.0'    
    testCompile group: 'junit', name: 'junit', version: '4.+'
    
    compile group: 'log4j', name: 'log4j', version:'1.2.16'
    
    compile group: 'org.postgresql', name: 'com.springsource.org.postgresql.jdbc4', version:'8.3.604'
    
	compile group: 'com.hazelcast', name:'hazelcast', version:'1.9.4'
	
    compile group: 'org.mybatis', name: 'mybatis', version:'3.0.5'
    compile group: 'org.mybatis', name: 'mybatis-hazelcast', version:'1.0.0'
    
    compile group: 'commons-lang', name: 'commons-lang', version:'2.2'
	compile group: 'commons-net', name: 'commons-net', version:'2.2'
	
    compile group: 'org.elasticsearch', name: 'elasticsearch', version:'0.17.5'
    
    compile group: 'org.codehaus.jackson', name: 'jackson-xc', version:'1.7.5'
    
    compile group: 'args4j', name: 'args4j', version:'2.0.12'
    
    compile group: "org.apache.commons", name:"com.springsource.org.apache.commons.dbcp", version:"1.2.2.osgi"
    compile group: "org.springframework", name:"org.springframework.web.servlet", version:"3.0.5.RELEASE"
    compile group: "org.springframework", name:"org.springframework.jdbc", version:"3.0.5.RELEASE"
    
    compile group: 'org.mybatis', name: 'mybatis-spring', version:'1.0.0'
    
    // used for runnin wsgen
    //jaxws 'com.sun.xml.ws:jaxws-tools:2.1.4'
    
    // used for soap services
    compile group: 'org.apache.cxf', name: 'cxf-rt-frontend-jaxws', version: '2.2.6'
    compile group: 'org.apache.cxf', name: 'cxf-rt-transports-http', version: '2.2.6'
    
    
    
    //compile group: 'org.neo4j', name: 'neo4j', version: '1.4.1'
    //compile group: 'org.neo4j', name: 'neo4j-kernel', version: '1.4.1'
    //compile group: 'org.neo4j', name: 'neo4j-meta-model', version: '0.9-SNAPSHOT'
    
    
    
    compile group: 'uk.ac.ebi.das', name:'jdas', version: '1.0.1'
	
	// note that this information is matched up to jars in the local repository by the use of naming convention assumptions
	// as well as some trial and error by ivy
	compile group: 'net.sf', name: 'sam', version: '1.45', ext: 'jar'
	compile group: 'org.sanger', name: 'artemis', version: 'v13.2.1', ext:'jar'
    compile group: 'org.biojava', name: 'biojava', version: '1.6', ext:'jar'
    compile group: 'org.obo', name: 'obo', version: '1.0', ext:'jar'
    compile group: 'org.obo', name: 'bbop', version: '1.0', ext:'jar'
    
    compile group:'jgrapht', name:'jgrapht', version: '0.7.3'
    
    
    
//    compile group: 'com.hp.hpl.jena', name: 'jena', version: '2.6.4'
//    compile group: 'edu.stanford.smi.protege', name: 'protege', version: '3.4.7'
//    compile group: 'edu.stanford.smi.protege', name: 'protege-owl', version: '3.4.7'
//    compile group: 'edu.stanford.smi.protege', name: 'orphanNodesAlg'
    
	
	// does not currently work with eclipse target
    // compile fileTree(dir: 'lib/local', includes: ['**.jar'])
    
}

jar {
	archiveName = "crawl.jar"
}

task clientJar(type : Jar) {
	from sourceSets.main.classes
	include 'org/genedb/crawl/client/**'
	include 'org/genedb/crawl/model/**'
	include 'org/genedb/crawl/json/**'
	baseName = "crawl-client"
}

task elasticSearchRegexPlugin(type: Jar) {
	from sourceSets.main.classes
	include 'org/genedb/crawl/elasticsearch/plugin/**'
	include 'es-plugin.properties'
	archiveName = "elasticsearch-regex-0.16.0.jar"
}

pluginDistDir = "tmp/plugin"

task copyDist(dependsOn: [elasticSearchRegexPlugin], description: 'Builds the plugin zip file') << {
	copy {
		from project.buildDir.getPath() + "/libs/elasticsearch-regex-0.16.0.jar"
		into pluginDistDir
	}
}

task zipPlugin(type: Zip, dependsOn: ['copyDist']) {
	from(pluginDistDir) {
	}
	archiveName = "elasticsearch-regex-0.16.0.zip"
	ant.delete(dir: pluginDistDir)
}

task releasePlugin(dependsOn: [zipPlugin]) << {
	copy {
		from distsDir
		into new File("/Library/WebServer/Documents/plugins/regex")
	}
}






jar << {
	
    manifest {
        attributes 'Implementation-Title': 'Crawl', 'Implementation-Version': '0.1'
    }
	
	// the default set in the gradle.properties file is currently false as it should take less time
	if (fat == "true") {
	    from configurations.compile.collect {
	        it.isDirectory() ? it : zipTree(it).matching{exclude{it.name == 'META-INF'}}
	    }
	} else {
		copy {
			from configurations.runtime
			from configurations.runtime.allArtifacts*.file
			into('build/libs')
		}
	}
	
	
}

test.doFirst {
    systemProperties.putAll( props )
}

test {
	maxHeapSize = '2048m'
}

/*
* Currently using a custom install task because the gradle application plugin only supports one main class.
*/
task install(dependsOn: 'jar') << {
   
   copy {
	   from tree = fileTree(project.buildDir.getPath() + "/libs").include('**/*.jar')
	   into dir + "/lib"
   }
   
   copy {
	   from "./crawl"
	   into dir + "/bin"
   }
   
   ant.chmod(perm: "+x", dir: new File(dir + "/bin"), includes: '*')
}





/*
 * WAR building and deployment.
 */

war.doFirst{
    
    
//    println configurations.compile
//    
//    println (configurations.compile).asPath
//    println sourceSets.main.java.srcDirs
//    println configurations.compile.asPath
    
    /*
     * wsgen -verbose -d build/classes/main \
     *  -cp build/classes/main:build/libs/org.springframework.web-3.0.5.RELEASE.jar:build/libs/org.springframework.beans-3.0.5.RELEASE.jar:build/libs/org.springframework.context-3.0.5.RELEASE.jar \
     *  org.genedb.crawl.controller.FeaturesControlle
     * */
    
//    ant {
//     verbose=true
//       taskdef(
//         name:'wsgen',
//         classname:'com.sun.tools.ws.ant.WsGen',
//         classpath: (configurations.jaxws + configurations.compile ).asPath)
//       wsgen(
//         keep:true,
//         destdir: 'build/classes/main',
//         sei:'org.genedb.crawl.controller.FeaturesController',
//         classpath: 'build/classes/main:' + configurations.compile.asPath)
//       wsgen(
//           keep:true,
//           destdir: 'build/classes/main',
//           sei:'org.genedb.crawl.controller.OrganismsController',
//           classpath: 'build/classes/main:' + configurations.compile.asPath)
//       wsgen(
//           keep:true,
//           destdir: 'build/classes/main',
//           sei:'org.genedb.crawl.controller.RegionsController',
//           classpath: 'build/classes/main:' + configurations.compile.asPath)
////       wsgen(
////           keep:true,
////           destdir: 'build/classes/main',
////           sei:'org.genedb.crawl.controller.SamController',
////           classpath: 'build/classes/main:' + configurations.compile.asPath)
////       wsgen(
////           keep:true,
////           destdir: 'build/classes/main',
////           sei:'org.genedb.crawl.controller.VariantController',
////           classpath: 'build/classes/main:' + configurations.compile.asPath)
//    }
    
    
    
    
    resourceType = props["resource.type"]
    ant.copy (
        file:'etc/config/crawl-' + resourceType + '.xml', 
        toFile:'tmp/WEB-INF/crawl-repository.xml',
        overwrite:'true' )
    
//    resourceController = props["resource.controller"]
//    ant.copy (
//        file:'etc/config/crawl-controller-' + resourceController + '.xml',
//        toFile:'tmp/WEB-INF/crawl-controller.xml',
//        overwrite:'true' )
    
	
	new File("tmp/WEB-INF/classes/").mkdirs()
	
    if (props["hazelcast"] != null)
        hazelcast = props["hazelcast"]
    
	ant.copy (
		file: hazelcast,
		toFile:'tmp/WEB-INF/classes/hazelcast.xml',
		overwrite:'true' )
	
	
	/*
	* To simplify getting started, a default alignments.json is provided
	* and used in the documentation examples, and it is specified as
	* a relative path (so they don't have to edit a property file to get
	* going. This works fine for the jetty runner, but if a war is
	* deployed it needs to know the absolute path of the file that was
	* specified. Rather than copying the file into the war, its absolute
	* path is determined at build time.
	*/
   
	File project_properties = new File("tmp/WEB-INF/classes/project.properties")
	project_properties.write("#generated by gradle build \n")
	props.each() { key, value ->
		
		if (key == "alignments") {
			File alignmentsFile = new File(value)
			
			if (alignmentsFile != null && alignmentsFile.isFile()) {
				value = alignmentsFile.getAbsolutePath()
			} 
		}
		
		def line = key + "=" + value + "\n"
		//print line
		project_properties.append(line)
    }
	
	def webArtemisClone = new File(tmpResourcesPath + "/" + webArtemisClonePath)
	
	if (pullWebArtemis == "true") {
	
		def proc = ['rm', '-rf', tmpResourcesPath + "/" + webArtemisClonePath].execute()
		proc.waitFor()
		if (proc.exitValue() > 1) throw new Exception (proc.err.text)
	
		println "Cloning Web-Artemis into " + tmpResourcesPath + webArtemisClonePath
		gitClone(webArtemisGitUri, webArtemisGitBranch, file(tmpResourcesPath))
		
		String ws = "/" + props["deploy.name"];
		
		String indexFileName = tmpResourcesPath + "/" + webArtemisClonePath + "/index.html";
		String html =   new File(indexFileName).getText();
		
		String toReplace = "{'directory':'.', 'source':'Pf3D7_01', 'start':'1', 'bases':'8000', 'showFeatureList':true, 'start': '1', 'zoomMaxRatio':'1.'});";
		String with = "{webService:'${ws}', 'directory':'.', 'source':'${webArtemisInitialChromosome}', 'start':'1', 'bases':'8000', 'showFeatureList':true, 'start': '1', 'zoomMaxRatio':'1.'});";
		
		println("Attempting to replace \n ${toReplace} \nwith \n ${with}");
		String replaced = html.replace(toReplace, with); 
		
		new File(indexFileName).setText(replaced);
		
	}
	
	copy {
		from tree = fileTree("./doc")
		into tmpResourcesPath
	}
	
}



war {
    webInf { from 'tmp/WEB-INF' } 
    baseName = props["deploy.name"]
	archiveName = props["deploy.name"] + ".war"
	from 'tmp/rootContent/'
}



task deploy(dependsOn: 'war') << {
    copy {
        from war.archivePath
        into props["deploy.dir"] 
    }
}

// use this for generating a list of jars to add to the repo in lib/local ...
task copyLibs << {
    def newFiles = []
    for(file in configurations.compile) {
        String fileName = file.getPath()
        if (! fileName.contains("/lib/local/")) {
            newFiles.add(fileName)
        }
    }
    
    copy {
        from files(newFiles)
        into "lib/local"
    }
}


/*
 * A custom task for wiping local ElasticSearch data
 */
task cleanes << {
    println "Deleting " + props["resource.elasticsearch.local.pathdata"]
    ant.delete(dir:props["resource.elasticsearch.local.pathdata"])
    println "Deleting " + props["resource.elasticsearch.local.pathlogs"]
    ant.delete(dir:props["resource.elasticsearch.local.pathlogs"])
}


/*
 * currently required for the eclipse plugin because currently eclipse classpath does 
 * not fail gracefully if a sources jar is not available, which is the case for the 
 * local jars, see :
 * 		http://issues.gradle.org/browse/GRADLE-1157
 * should be able to remove this once it is fixed
 */
eclipseClasspath {
	downloadSources = false; // required for eclipseClasspath to work
}



/*
 * Generates the gradlew wrapper.
 */
task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-2'
}

/**
 * Makes a git clone.
 */
def gitClone(String url, String branch, File dir) {
	dir.mkdirs()
    def exec = ['git','clone', url, '-b', branch]
    println exec
	def proc = exec.execute(['GIT_SSL_NO_VERIFY=true'], dir)
	proc.waitFor()
	if (proc.exitValue() > 1) throw new Exception (proc.err.text)
}



